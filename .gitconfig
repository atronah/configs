;; to add this config into yours without modification use
;[include]
;        path = /path/to/gitconfig
;

[help]
    ;; "info" - corresponds to -i|--info,
    ;; "web" or "html" correspond to -w|--web.
    ;; "man" corresponds to -m|--man,
    ; format = html

[core]
    autocrlf = true
    ;; to prevent troubles with cyrillic in console (see https://habrahabr.ru/post/74839/)
    quotepath = false
    editor = vim

; to use for `docx` files add line `*.docx diff=pandoc` into `.gitattributes` file in directory with docx files
[diff "pandoc"]
textconv=pandoc --to=markdown
prompt=false

[i18n]
    ;; NOTE: to make Vim display cyrillic correctly you have to set LANG=ru_RU.UTF-8
    ;; no longer needed, becouse default settings work correct
    ;commitencoding = utf-8
    ;logoutputencoding = utf-8

[pull]
    ;; to prevent merge
    ff = true
    ;; try to rebase your local changes on top of remote branch during pull.
    ;; instead I prefer to use alias "pullr" (see bellow)
    ;; because it transforms local unpushed merge into set of commit
    ;rebase = true

[push]
    default = simple
    ;; to prevent fast-forwarding during push
    ;ff = false

[merge]
    ;; to prevent fast-forwarding during merge
    ff = false

[credential]
    ;; to store your credentials into .git-credentials file
    ;helper = store

[alias]
    ;; Simple shortcuts
    a = add
    st = status
    ci = commit -v
    cp = cherry-pick
    co = checkout
    br = branch
    sm = submodule
    rollback = checkout --
    unstage = reset HEAD --

    ;; Shortcuts for extra behaviour
    ap = add --path
    be = branch --edit-description
    ss = status --short --branch
    un = reset HEAD --
    fx = commit --fixup
    mr = merge --no-ff

    ;; Log
    ls = log --oneline
    last = log -1 HEAD
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    graph = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    type = cat-file -t
    dump = cat-file -p
    pulr = pull --rebase
    wdiff = diff --word-diff=color
    ;;; format to html with link to commit (like "http://gitlab.com/{group}/{project}/commit/%H")
    html = log --pretty=format:'<h3>%ad <a href="http://gitlab.com/{group}/{project}/commit/%H">%h</a> %s</h3>%n<pre>%b</pre>%n' --date=short --author=atronah
    ;;; extended html with three arguments: date, group name, project name.
    htmlex = "! f() { git html | sed -n -e \"/<h3>$3/,/<\\/pre>/ p\" | sed "s/{group}/$1/g" | sed "s/{project}/$2/g"; }; f"
    ;;; other formatting
    lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    ;;; next commit (to find merge commit which in general is a child of version tag commit)
    next = !" f() { git log --reverse --ancestry-path --oneline --format=format:%H $1..HEAD | head -1; }; f"
    ;;; `changelog` shows all changes after specified commit/tag without merged branches details
    ;;;   for example `git changelog v1.2.3`
    changelog = !"git log --format=format:'- %cs (%C(red)%H%C(reset), %C(dim white)@%an%C(reset)): %C(green)%s%C(reset). %b' --first-parent $1..HEAD"
    ;;; `sql-changelog` shows the same as `changelog` but in sql format to using in sql-projects
    ;;;   to insert into versioning info table
    sql-changelog = !"git log --date=format:'%d.%m.%Y' --format=format:\"select '%H' as sha%n        , '%cd' as released%n        , '%s. %b' as description%nfrom rdb\\$database union\" --first-parent $1..HEAD"

    ;; Workflow
    get = !git pull --rebase && git submodule update --init --recursive

    ;; Name
    branch-name = rev-parse --abbrev-ref HEAD
    upstream-name = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)

    ;; Topics
    topic-start  = "!f(){ b=$1; git checkout master; git fetch; git rebase; git checkout -b "$b" master; };f"
    topic-finish = "!f(){ b=$(git branch-name); git checkout master; git branch -d "$b"; git push origin ":$b"; };f"

    ;; Other
    it = "!git init && git commit -m “root” --allow-empty"
    fxx = "!f() { git log -1 --format=format:%H -- "${GIT_PREFIX:-./}$1" | xargs -I {} git commit --fixup {} -- "${GIT_PREFIX:-./}$1" ; }; f"
    local-branches = "!git branch --format '%(refname:short) %(upstream:short)' | awk '{if (!$2) print $1;}'"


[gui]
    encoding = utf-8


[color]
    ui = true
