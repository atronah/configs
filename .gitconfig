[core]
    autocrlf = true
    quotepath = false
    editor = vim


[i18n]
    # для норм отображения в Vim выполнить set LANG=ru_RU.UTF-8 (или настроить переменные окружения)
    #commitencoding = utf-8
    #logoutputencoding = utf-8


[pull]
    ff = true
    # `rebase = true` приводит к тому, что локальный `merge` в ветку переделывается в последовательность аналогичных коммитов,
    # даже если до `merge` локальная ветка соответствовала remote-версии
    #rebase = true


[push]
    default = simple
    #ff = false


[merge]
    ff = false


#[credential]
#    helper = store


[alias]
    ; Simple shortcuts
    a = add
    st = status
    ci = commit -v
    cp = cherry-pick
    co = checkout
    br = branch
    sm = submodule
    rollback = checkout --
    unstage = reset HEAD --

    ; Shortcuts for extra behaviour
    ap = add --path
    be = branch --edit-description
    ss = status --short --branch
    un = reset HEAD --
    fx = commit --fixup
    mr = merge --no-ff
    rba = rebase -i --autosquash

    ; Log
    ls = log --oneline
    last = log -1 HEAD
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    graph = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    wdiff = diff --word-diff=color
    ;;; format to html with link to commit (like "http://gitlab.com/{group}/{project}/commit/%H")
    html = log --pretty=format:'<h3>%ad <a href="http://gitlab.com/{group}/{project}/commit/%H">%h</a> %s</h3>%n<pre>%b</pre>%n' --date=short --author=atronah
    ;;; extended html with three arguments: date, group name, project name.
    htmlex = "! f() { git html | sed -n -e \"/<h3>$3/,/<\\/pre>/ p\" | sed "s/{group}/$1/g" | sed "s/{project}/$2/g"; }; f"
    ;;; other formatting
    lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    ;;; next commit (to find merge commit which in general is a child of version tag commit)
    next = !" f() { git log --reverse --ancestry-path --oneline --format=format:%H $1..HEAD | head -1; }; f"
    ;;; `changelog` shows all changes after specified commit/tag without merged branches details
    ;;;   for example `git changelog v1.2.3`
    changelog = !"git log --format=format:'- %cs (%C(red)%H%C(reset), %C(dim white)@%an%C(reset)): %C(green)%s%C(reset). %b' --first-parent $(git next $1)..HEAD"
    ;;; `sql-changelog` shows the same as `changelog` but in sql format to using in sql-projects
    ;;;   to insert into versioning info table
    sql-changelog = !"git log --date=format:'%d.%m.%Y' --format=format:\"select '%H' as sha%n        , '%cd' as released%n        , '%s. %b' as description%nfrom rdb\\$database union\" --first-parent $(git next $1)..HEAD"

    ; Workflow
    get = !git pull --rebase && git submodule update --init --recursive

    ; Name
    branch-name = rev-parse --abbrev-ref HEAD
    upstream-name = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)

    ; Topics
    topic-start  = "!f(){ b=$1; git checkout master; git fetch; git rebase; git checkout -b "$b" master; };f"
    topic-finish = "!f(){ b=$(git branch-name); git checkout master; git branch -d "$b"; git push origin ":$b"; };f"

    ; Other
    it = "!git init && git commit -m “root” --allow-empty"
    fxx = "!f() { git log -1 --format=format:%H -- "${GIT_PREFIX:-./}$1" | xargs -I {} git commit --fixup {} -- "${GIT_PREFIX:-./}$1" ; }; f"


[gui]
    encoding = utf-8


[color]
    ui = true
